webpackJsonp([126],{1594:function(n,e,t){"use strict";function a(n){return n&&n.__esModule?n:{default:n}}function s(n){return y.default.createElement(n.tag,(0,k.default)({},n.attributes,{dangerouslySetInnerHTML:{__html:n.html}}))}function o(n){return y.default.createElement(s,{tag:"section",html:n.html,attributes:{className:"zandoc-react-markdown"}})}function c(n){return y.default.createElement(s,{tag:"style",html:n.style})}function l(n,e){for(;n;)return n.offsetTop&&"static"!==getComputedStyle(n).position&&(e+=n.offsetTop),l(n.parentNode,e);return e}Object.defineProperty(e,"__esModule",{value:!0});var i=t(1),r=a(i),p=t(4),d=a(p),u=t(2),h=a(u),m=t(3),f=a(m),g=t(7),k=a(g),v=t(0),y=a(v),_=t(232),b=a(_),w=(function(n){function e(){var n,t,a,s;(0,r.default)(this,e);for(var o=arguments.length,c=Array(o),l=0;l<o;l++)c[l]=arguments[l];return t=a=(0,h.default)(this,(n=e.__proto__||Object.getPrototypeOf(e)).call.apply(n,[this].concat(c))),a.state={showCode:!1},a.toggle=function(){a.setState({showCode:!a.state.showCode})},s=t,(0,h.default)(a,s)}(0,f.default)(e,n),(0,d.default)(e,[{key:"render",value:function(){var n=this.state.showCode,e=this.props,t=e.title,a=e.src,o=e.children;return y.default.createElement("div",{className:"zandoc-react-demo"},y.default.createElement("div",{className:"zandoc-react-demo__preview"},o),y.default.createElement("div",{className:"zandoc-react-demo__bottom",onClick:this.toggle},y.default.createElement("div",{className:"zandoc-react-demo__title"},y.default.createElement("p",null,t||"")),y.default.createElement("i",{className:"zenticon zenticon-caret-up zandoc-react-demo__toggle "+(n?"zandoc-react-demo__toggle-on":"zandoc-react-demo__toggle-off")})),n&&y.default.createElement("pre",{className:"zandoc-react-demo__code"},y.default.createElement(s,{tag:"code",html:a,attributes:{className:"language-jsx"}})))}}])}(v.Component),function(n){function e(){return(0,r.default)(this,e),(0,h.default)(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return(0,f.default)(e,n),(0,d.default)(e,[{key:"componentDidMount",value:function(){var n=location.hash;if(n){var e=document.querySelector('a[href="'+n+'"]');e&&(0,b.default)(document.documentElement,0,l(e,-9))}}},{key:"render",value:function(){return y.default.createElement("div",{className:"zandoc-react-container",key:null},y.default.createElement(c,{style:""}),y.default.createElement(o,{html:'<h2 class="anchor-heading"><a href="#writing-documentation">¶</a><a href="javascript:void(0)" id="writing-documentation" class="anchor-point"></a>Writing Documentation</h2>\n<h4 class="anchor-heading"><a href="#file-format">¶</a><a href="javascript:void(0)" id="file-format" class="anchor-point"></a>File Format</h4>\n<p>It\'s Markdown.</p>\n<p>But in order to support demos and internationalization, there\'re some things you need to know.</p>\n<p>Keep reading.</p>\n<h4 class="anchor-heading"><a href="#title">¶</a><a href="javascript:void(0)" id="title" class="anchor-point"></a>Title</h4>\n<p>Titles begin from <code>h2</code>(e.g. <code>##</code> in Markdown), <code>h3</code> and <code>h4</code> is enough in most cases.</p>\n<p>Don\'t nesting too many levels.</p>\n<h4 class="anchor-heading"><a href="#description">¶</a><a href="javascript:void(0)" id="description" class="anchor-point"></a>Description</h4>\n<p>You can put a component description below the first title. Be concise.</p>\n<h4 class="anchor-heading"><a href="#guides-optional">¶</a><a href="javascript:void(0)" id="guides-optional" class="anchor-point"></a>Guides (Optional)</h4>\n<p>You can have a usage guide following the description, starts with an <code>h3</code>.</p>\n<h4 class="anchor-heading"><a href="#demos">¶</a><a href="javascript:void(0)" id="demos" class="anchor-point"></a>Demos</h4>\n<p>Demos are written in separate files in <code>demos</code> sub-directory.</p>\n<p>Demos are automatically inserted into the final documentation by our loader.</p>\n<pre><code class="language-text"><span class="token operator">--</span><span class="token operator">-</span>\norder<span class="token punctuation">:</span> <span class="token number">1</span>                          <span class="token comment">// `order` defines the order in the final documentation, smaller first</span>\nzh<span class="token operator">-</span>CN<span class="token punctuation">:</span>                            <span class="token comment">// Start of Chinese string definitions</span>\n  title<span class="token punctuation">:</span> 基础用法                  <span class="token comment">// Required, demo title</span>\n  content<span class="token punctuation">:</span> 公告内容                <span class="token comment">// `content` will be replace as `公告内容` in Chinese documentaion</span>\nen<span class="token operator">-</span>US<span class="token punctuation">:</span>                            <span class="token comment">// Start of English string definitions</span>\n  title<span class="token punctuation">:</span> Basic                    <span class="token comment">// Required, demo title</span>\n  content<span class="token punctuation">:</span> Alert content          <span class="token comment">// `content` will be replace as `Alert content` in English documentaion</span>\n<span class="token operator">--</span><span class="token operator">-</span>\n\n<span class="token template-string"><span class="token string">``</span></span><span class="token template-string"><span class="token string">`jsx\nimport { Alert } from \'zent\';\nReactDOM.render(                  // ReactDOM.render is the entry point\n  &#x3C;Alert>{i18n.content}&#x3C;/Alert>   // The component you want to render\n  , mountNode                     // `</span></span>mountNode<span class="token template-string"><span class="token string">` is predefined\n);\n`</span></span><span class="token template-string"><span class="token string">``</span></span>\n\n<span class="token comment">// It\'s precss</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">.</span>zent<span class="token operator">-</span>badge <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span>nested <span class="token punctuation">{</span>\n      background<span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span></code></pre>\n<p>A demo can have three parts:</p>\n<ul>\n<li>\n<p>YAML configuration</p>\n<ul>\n<li><code>order</code> and <code>title</code> are required</li>\n</ul>\n</li>\n<li>\n<p>JavaScript code</p>\n<ul>\n<li>Use <code>i18n.varName</code> as a placeholder to texts, and define <code>varName</code> in YAML.</li>\n</ul>\n</li>\n<li>\n<p>styles(optional)</p>\n<ul>\n<li>You don\'t need this in most cases</li>\n</ul>\n</li>\n</ul>\n<p>Some rules for writing demos:</p>\n<ul>\n<li>Start from the basics</li>\n<li>Orthogonal: one demo for one senario</li>\n</ul>\n<h4 class="anchor-heading"><a href="#api">¶</a><a href="javascript:void(0)" id="api" class="anchor-point"></a>API</h4>\n<p>Use a table for your APIs, the table should have these columns:</p>\n<table class="table">\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Required</th>\n<th>Default</th>\n<th>Alternative</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>visible</td>\n<td>Show or hide</td>\n<td>bool</td>\n<td>No</td>\n<td><code>false</code></td>\n<td><code>true</code>\n \n|\n \n<code>false</code></td>\n</tr>\n</tbody>\n</table>'}))}}]),e}(v.Component));e.default=w}});